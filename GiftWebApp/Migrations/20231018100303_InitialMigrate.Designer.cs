// <auto-generated />
using System;
using GiftWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GiftWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231018100303_InitialMigrate")]
    partial class InitialMigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GiftApp.Data.Enteties.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Burthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8fe09159-d62f-4242-95ad-f0cf00f2b0b3",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1994, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "524a361d-b46c-49bf-b356-e0f96aab8f65",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Stoikov",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGpo3mjrnohXDqx5VfQkbRS10a5exrHc3PPvHMRDKq7JJPVYa64cJDre5xHcCR25FQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef2e5757-0d76-4274-b1c0-7554fd4263f5",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6d97f4b3-1915-4752-b475-042686c4e28a",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1990, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a8c39b18-6ac7-4781-9447-f831bc21a2e9",
                            Email = "georgi@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            LastName = "Minkov",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMeSWr7rEBIXbS+wSgqLCljJCx4fRHpUQegNUdvGUz+FeZw/EqWlYd+jGEcjMpYe2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26bd1d0a-d297-4174-8a40-4dec3479fd7e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "8b0441e0-6d0f-472f-8153-4d8e26a468d5",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1993, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b07482ad-7c66-4541-866c-e163493ed9c4",
                            Email = "misho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Misho",
                            LastName = "Vasilev",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPEzWwVO8f2QN8FWzgSJQEEC/TDANwbnxRz1SqjkvLybaBJaqGntFo3ctOAkisIySg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21b9cf77-14a8-4cb9-9138-0f0484ce4b0a",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "dd6d129e-81d2-48fc-905b-1aa6b843738b",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1991, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3bc5be28-ca35-40f9-ac01-6da2c4c1e535",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Dimitar",
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEER7JMD4Qa52hiJvOEBzPrFnFnTX+T3d9Unis2Aj+a1p8H2GTpUiZdSM86Y0jeOvDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6138753-c7ed-4f53-8952-d59e535dee62",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "7002e358-3fb4-4851-bc70-a436be01207a",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "650e929b-6749-40f5-97d6-de6e4be1733d",
                            Email = "svetlin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Svetlin",
                            LastName = "Simeonov",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECWdBGB37Rl9JNXUY2oddCGiE/uzPm8bMNd4q3G7vQtoqm4hNTIKu75B6QRk1+vWPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bffe452f-513a-43c0-b668-b002f265188a",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "02b935ad-6a7e-452b-aea3-1146f0a4e42d",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1995, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "14c1214b-b6e0-4822-9dc0-93e8f9bff2ba",
                            Email = "raq@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Raq",
                            LastName = "Angelova",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEK/CVQjl/gBNThnffTS++znBsb9K+kgI5PEDHxxME6MHNXClzrvCgROt9MQNPkI2tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de18973c-3f1c-4eec-bbb6-8e225b581a68",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0c0f1447-b639-4707-bb31-88ca4e199531",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1992, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5a9ad5b7-2485-45cb-ab9c-d8be562ba5dc",
                            Email = "mariq@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mariq",
                            LastName = "Krusteva",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKwvn3dmJV5S3s7KTvN0IaOIoPM3rip/tvtqn2fVxzdfMYm82UGXH9W1az2qffv1mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53d41055-d4c1-42d4-a7d9-72ed4d206f5a",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "01a7baa9-c505-4ee9-81e1-7a742a64bc84",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1997, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d8c45612-c23c-4961-8b81-358350e57a0e",
                            Email = "gabriela@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gabriela",
                            LastName = "Cvetanova",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPUvju6Hgdwl4o1Nj2L8YD5gn+GavD6JfHaENpPwshPpVs7fvG+80gEOXcMNKpTsuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78aed749-7b20-4299-b24a-a13b943dc751",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "332260b9-e3cd-477a-9718-8dce9cb0dbc8",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1991, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7999a1f5-a07a-42ac-9c2f-c069eca83e46",
                            Email = "cvetelina@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Cvetelina",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPVvCIlHyQ/iDJDZDapNuhrgEb1EMMi7SOw8eAbE7pgK6kGHhmFPMvTEVO9kDow8OA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6704d1e8-81b9-437d-a6e0-f2c32baafac3",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d778478e-8be8-49df-a4a5-c18b4767e54f",
                            AccessFailedCount = 0,
                            Burthday = new DateTime(1999, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "456b650a-9f9a-4b1a-9707-8514c9988fe2",
                            Email = "vanesa@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vanesa",
                            LastName = "Nikolova",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEE4/ERWqZDi6TQsPn9CWn95u3HvNCdfl8rqT+fjaUJEMIqvszUBhG75+XIgqhJHnTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0921741d-e0fc-4296-a928-9af25584fdbf",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("GiftApp.Data.Enteties.Gift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Iphone 12 Pro"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Samsung Galaxy Z Flip"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Smart watch"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vacantion"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Store voucher"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Money"
                        });
                });

            modelBuilder.Entity("GiftApp.Data.Enteties.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GiftId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GiftId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GiftApp.Data.Enteties.Vote", b =>
                {
                    b.HasOne("GiftApp.Data.Enteties.Gift", "Gift")
                        .WithMany()
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GiftApp.Data.Enteties.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GiftApp.Data.Enteties.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GiftApp.Data.Enteties.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GiftApp.Data.Enteties.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
